from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import time

# Set up Chrome options
chrome_options = Options()
download_directory = "/path/to/your/download/folder"  # Change this to your desired download path
chrome_options.add_experimental_option("prefs", {
    "download.default_directory": download_directory,
    "download.prompt_for_download": False,
    "download.directory_upgrade": True,
    "safebrowsing.enabled": True
})

# Set up WebDriver
service = Service("/path/to/chromedriver")  # Update this path
driver = webdriver.Chrome(service=service, options=chrome_options)

# Open Jira webpage
driver.get("https://jira.cc.bmwgroup.net/secure/StructureBoard.jspa?s=8870#")  # Update the correct URL
time.sleep(5)  # Wait for the page to load

# Click on "Export" button
export_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Export')]")
export_button.click()
time.sleep(2)

# Click on "Export to Excel"
export_excel_button = driver.find_element(By.XPATH, "//span[contains(text(), 'Export to Excel')]")
export_excel_button.click()

# Wait for the file to download
time.sleep(10)  # Adjust time based on network speed

# Close the browser
driver.quit()


Steps to Use:
Update the download_directory with your preferred download location.
Replace /path/to/chromedriver with the actual path to your ChromeDriver.
Ensure you are logged in to Jira or handle authentication in the script.
Run the script and check the download folder.

=======================================================================================================================================

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
import time

# Set up Chrome options
chrome_options = Options()
download_directory = "/path/to/your/download/folder"  # Change this to your preferred download path
chrome_options.add_experimental_option("prefs", {
    "download.default_directory": download_directory,
    "download.prompt_for_download": False,
    "download.directory_upgrade": True,
    "safebrowsing.enabled": True
})

# Set up WebDriver
service = Service("/path/to/chromedriver")  # Update this path with your chromedriver location
driver = webdriver.Chrome(service=service, options=chrome_options)

# Open Jira webpage
driver.get("https://jira.cc.bmwgroup.net/secure/StructureBoard.jspa?s=8870#")  # Update with the correct Jira URL
time.sleep(5)  # Wait for the page to load completely

# Locate and expand the "Resolved" dropdown
try:
    resolved_dropdown = driver.find_element(By.XPATH, "//span[contains(text(), 'RESOLVED')]")  # Update XPath if needed
    resolved_dropdown.click()
    time.sleep(3)  # Wait for dropdown to expand
except Exception as e:
    print("Failed to expand Resolved dropdown:", e)

# Click on "Export" button
try:
    export_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Export')]")
    export_button.click()
    time.sleep(2)

    # Click on "Export to Excel"
    export_excel_button = driver.find_element(By.XPATH, "//span[contains(text(), 'Export to Excel')]")
    export_excel_button.click()

    # Wait for the file to download
    time.sleep(10)  # Adjust time based on network speed
except Exception as e:
    print("Export failed:", e)

# Close the browser
driver.quit()


What This Script Does:
Opens Jira.
Expands the "Resolved" dropdown by clicking on it.
Waits for it to load.
Clicks "Export" and then "Export to Excel."
Waits for the file to download.
Closes the browser.
🔧 Next Steps:

Replace /path/to/chromedriver with the actual path to your ChromeDriver.
Replace /path/to/your/download/folder with your desired download directory.
Ensure you are logged into Jira before running the script.

Error-

Traceback (most recent call last):
  File "/home/ashishm22/Desktop/jira_extractor.py", line 20, in <module>
    driver = webdriver.Chrome(service=service, options=chrome_options)
  File "/home/ashishm22/.local/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py", line 45, in __init__
    super().__init__(
  File "/home/ashishm22/.local/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py", line 55, in __init__
    self.service.start()
  File "/home/ashishm22/.local/lib/python3.10/site-packages/selenium/webdriver/common/service.py", line 120, in start
    raise WebDriverException(f"Can not connect to the Service {self._path}")
selenium.common.exceptions.WebDriverException: Message: Can not connect to the Service /home/ashishm22/Desktop/Jira_issues/chromedriver/chromedriver-linux64/chrome
================================================================================================================================================================================

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
import time

# Set up Chrome options
chrome_options = Options()
download_directory = "/home/ashishm22/Desktop/Jira_issues/excel_resolved"  # Change this to your preferred download path
chrome_options.add_experimental_option("prefs", {
    "download.default_directory": download_directory,
    "download.prompt_for_download": False,
    "download.directory_upgrade": True,
    "safebrowsing.enabled": True
})

# Set up WebDriver
service = Service("/home/ashishm22/Desktop/Jira_issues/chromedriver/chromedriver-linux64/chromedriver")  # Update this path with your chromedriver location
driver = webdriver.Chrome(service=service, options=chrome_options)

# Open Jira webpage
driver.get("https://jira.cc.bmwgroup.net/secure/StructureBoard.jspa?s=8870#")  # Update with the correct Jira URL
time.sleep(5)  # Wait for the page to load completely

# Locate and expand the "Resolved" dropdown
try:
    resolved_dropdown = driver.find_element(By.XPATH, "//span[contains(text(), 'RESOLVED')]")  # Update XPath if needed
    resolved_dropdown.click()
    time.sleep(3)  # Wait for dropdown to expand
except Exception as e:
    print("Failed to expand Resolved dropdown:", e)

# Click on "Export" button
try:
    export_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Export')]")
    export_button.click()
    time.sleep(2)

    # Click on "Export to Excel"
    export_excel_button = driver.find_element(By.XPATH, "//span[contains(text(), 'Export to Excel')]")
    export_excel_button.click()

    # Wait for the file to download
    time.sleep(10)  # Adjust time based on network speed
except Exception as e:
    print("Export failed:", e)

# Close the browser
driver.quit()


Traceback (most recent call last):
  File "/home/ashishm22/Desktop/jira_extractor.py", line 20, in <module>
    driver = webdriver.Chrome(service=service, options=chrome_options)
  File "/home/ashishm22/.local/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py", line 45, in __init__
    super().__init__(
  File "/home/ashishm22/.local/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py", line 66, in __init__
    super().__init__(command_executor=executor, options=options)
  File "/home/ashishm22/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py", line 250, in __init__
    self.start_session(capabilities)
  File "/home/ashishm22/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py", line 342, in start_session
    response = self.execute(Command.NEW_SESSION, caps)["value"]
  File "/home/ashishm22/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py", line 429, in execute
    self.error_handler.check_response(response)
  File "/home/ashishm22/.local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py", line 232, in check_response
    raise exception_class(message, screen, stacktrace)
selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 135
Current browser version is 134.0.6998.117 with binary path /opt/google/chrome/chrome


sudo apt update
sudo apt --only-upgrade install google-chrome-stable
google-chrome --version  # Verify updated version

Failed to expand Resolved dropdown: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//span[contains(text(), 'RESOLVED')]"}
  (Session info: chrome=135.0.7049.52); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Stacktrace:
#0 0x613e577eae6a <unknown>
#1 0x613e5729c640 <unknown>
#2 0x613e572edb5a <unknown>
#3 0x613e572edd51 <unknown>
#4 0x613e5733c344 <unknown>
#5 0x613e5731377d <unknown>
#6 0x613e573397b5 <unknown>
#7 0x613e57313523 <unknown>
#8 0x613e572dfef3 <unknown>
#9 0x613e572e0b51 <unknown>
#10 0x613e577afd2b <unknown>
#11 0x613e577b3c01 <unknown>
#12 0x613e57797512 <unknown>
#13 0x613e577b4774 <unknown>
#14 0x613e5777b90f <unknown>
#15 0x613e577d8fb8 <unknown>
#16 0x613e577d9196 <unknown>
#17 0x613e577e9cb6 <unknown>
#18 0x7794fb094ac3 <unknown>

Export failed: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//button[contains(text(), 'Export')]"}
  (Session info: chrome=135.0.7049.52); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Stacktrace:
#0 0x613e577eae6a <unknown>
#1 0x613e5729c640 <unknown>
#2 0x613e572edb5a <unknown>
#3 0x613e572edd51 <unknown>
#4 0x613e5733c344 <unknown>
#5 0x613e5731377d <unknown>
#6 0x613e573397b5 <unknown>
#7 0x613e57313523 <unknown>
#8 0x613e572dfef3 <unknown>
#9 0x613e572e0b51 <unknown>
#10 0x613e577afd2b <unknown>
#11 0x613e577b3c01 <unknown>
#12 0x613e57797512 <unknown>
#13 0x613e577b4774 <unknown>
#14 0x613e5777b90f <unknown>
#15 0x613e577d8fb8 <unknown>
#16 0x613e577d9196 <unknown>
#17 0x613e577e9cb6 <unknown>
#18 0x7794fb094ac3 <unknown>

============================================================================================================

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

import time

# Set up Chrome options
chrome_options = Options()
download_directory = "/home/ashishm22/Desktop/Jira_issues/excel_resolved"
chrome_options.add_experimental_option("prefs", {
    "download.default_directory": download_directory,
    "download.prompt_for_download": False,
    "download.directory_upgrade": True,
    "safebrowsing.enabled": True
})

# Set up WebDriver
service = Service("/home/ashishm22/Desktop/Jira_issues/chromedriver/chromedriver-linux64/chromedriver")
driver = webdriver.Chrome(service=service, options=chrome_options)

# Open Jira webpage
driver.get("https://jira.cc.bmwgroup.net/secure/StructureBoard.jspa?s=8870#")
wait = WebDriverWait(driver, 15)  # Wait for elements

# Try switching to iframe if necessary
try:
    iframe = driver.find_element(By.TAG_NAME, "iframe")
    driver.switch_to.frame(iframe)
    print("Switched to iframe")
except:
    print("No iframe found")

# Locate and expand the "Resolved" dropdown
try:
    resolved_dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'RESOLVED')]")))
    resolved_dropdown.click()
    time.sleep(3)
    print("Clicked Resolved dropdown")
except Exception as e:
    print("Failed to expand Resolved dropdown:", e)

# Click on "Export" button
try:
    export_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Export')]")))
    export_button.click()
    time.sleep(2)

    export_excel_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'Export to Excel')]")))
    export_excel_button.click()

    time.sleep(10)  # Wait for download
    print("Export successful")
except Exception as e:
    print("Export failed:", e)

driver.quit()
==========================================================================================================================================================

No iframe found
Failed to expand Resolved dropdown: Message: 
Stacktrace:
#0 0x63b971a74e6a <unknown>
#1 0x63b971526640 <unknown>
#2 0x63b971577b5a <unknown>
#3 0x63b971577d51 <unknown>
#4 0x63b9715c6344 <unknown>
#5 0x63b97159d77d <unknown>
#6 0x63b9715c37b5 <unknown>
#7 0x63b97159d523 <unknown>
#8 0x63b971569ef3 <unknown>
#9 0x63b97156ab51 <unknown>
#10 0x63b971a39d2b <unknown>
#11 0x63b971a3dc01 <unknown>
#12 0x63b971a21512 <unknown>
#13 0x63b971a3e774 <unknown>
#14 0x63b971a0590f <unknown>
#15 0x63b971a62fb8 <unknown>
#16 0x63b971a63196 <unknown>
#17 0x63b971a73cb6 <unknown>
#18 0x71b879894ac3 <unknown>

Export failed: Message: 
Stacktrace:
#0 0x63b971a74e6a <unknown>
#1 0x63b971526640 <unknown>
#2 0x63b971577b5a <unknown>
#3 0x63b971577d51 <unknown>
#4 0x63b9715c6344 <unknown>
#5 0x63b97159d77d <unknown>
#6 0x63b9715c37b5 <unknown>
#7 0x63b97159d523 <unknown>
#8 0x63b971569ef3 <unknown>
#9 0x63b97156ab51 <unknown>
#10 0x63b971a39d2b <unknown>
#11 0x63b971a3dc01 <unknown>
#12 0x63b971a21512 <unknown>
#13 0x63b971a3e774 <unknown>
#14 0x63b971a0590f <unknown>
#15 0x63b971a62fb8 <unknown>
#16 0x63b971a63196 <unknown>
#17 0x63b971a73cb6 <unknown>
#18 0x71b879894ac3 <unknown>


Updated code-

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

import time

# Set up Chrome options
chrome_options = Options()
download_directory = "/home/ashishm22/Desktop/Jira_issues/excel_resolved"
chrome_options.add_experimental_option("prefs", {
    "download.default_directory": download_directory,
    "download.prompt_for_download": False,
    "download.directory_upgrade": True,
    "safebrowsing.enabled": True
})

# Set up WebDriver
service = Service("/home/ashishm22/Desktop/Jira_issues/chromedriver/chromedriver-linux64/chromedriver")
driver = webdriver.Chrome(service=service, options=chrome_options)

# Open Jira webpage
driver.get("https://jira.cc.bmwgroup.net/secure/StructureBoard.jspa?s=8870#")
wait = WebDriverWait(driver, 15)  # Wait for elements

# Save the page source for debugging
page_source = driver.page_source
with open("jira_page.html", "w", encoding="utf-8") as f:
    f.write(page_source)

print("Page source saved as jira_page.html. Open it in a browser and inspect manually.")

# Click anywhere on the page to trigger lazy loading
try:
    actions = ActionChains(driver)
    actions.move_by_offset(100, 100).click().perform()
    time.sleep(2)  # Wait for page to react
    print("Clicked on page to trigger lazy loading.")
except:
    print("Failed to click on page.")

# Locate and expand the "Resolved" dropdown
try:
    resolved_dropdown = wait.until(EC.presence_of_element_located((By.XPATH, "//span[contains(text(), 'RESOLVED')]")))
    
    # Scroll to element before clicking
    driver.execute_script("arguments[0].scrollIntoView();", resolved_dropdown)
    time.sleep(1)

    # Try JavaScript Click
    driver.execute_script("arguments[0].click();", resolved_dropdown)
    print("Clicked Resolved dropdown")
except Exception as e:
    print("Failed to expand Resolved dropdown:", e)

# Click on "Export" button
try:
    export_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[normalize-space()='Export']")))
    driver.execute_script("arguments[0].click();", export_button)
    time.sleep(2)

    export_excel_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'Export to Excel')]")))
    driver.execute_script("arguments[0].click();", export_excel_button)

    time.sleep(10)  # Wait for download
    print("Export successful")
except Exception as e:
    print("Export failed:", e)

driver.quit()

======================================================================================================

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import time

# Set up Chrome options
chrome_options = Options()
service = Service("/home/ashishm22/Desktop/Jira_issues/chromedriver/chromedriver-linux64/chromedriver")

# Launch WebDriver
driver = webdriver.Chrome(service=service, options=chrome_options)

# Open Jira webpage
driver.get("https://jira.cc.bmwgroup.net/secure/StructureBoard.jspa?s=8870#")  # Update with correct Jira URL
time.sleep(5)  # Allow page to load

try:
    # Click on the "Other" tab
    other_tab = driver.find_element(By.XPATH, "//a[contains(text(), 'Other')]")
    other_tab.click()
    time.sleep(3)  # Wait for content to load

    # Extract Target I-Step
    target_istep_element = driver.find_element(By.XPATH, "//b[contains(text(), 'Target I-Step')]/following-sibling::text()")
    target_istep = target_istep_element.text.strip()

    # Extract Target Week
    target_week_element = driver.find_element(By.XPATH, "//b[contains(text(), 'Target Week')]/following-sibling::text()")
    target_week = target_week_element.text.strip()

    print(f"Target I-Step: {target_istep}")
    print(f"Target Week: {target_week}")

except Exception as e:
    print("Error:", e)

# Close the browser
driver.quit()

=============================================================================================
Error: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//a[contains(text(), 'Other')]"}
  (Session info: chrome=135.0.7049.52); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Stacktrace:
#0 0x609add0e4e6a <unknown>
#1 0x609adcb96640 <unknown>
#2 0x609adcbe7b5a <unknown>

===============================================================================================================================

            <div id="customfield-panel-5" class="tabs-pane">
                        <ul class="property-list">
                                                    <li id="rowForcustomfield_10700" class="item">
        <div class="wrap">
            <strong title="Meta Data" class="name">
                                    <label for="customfield_10700">Meta Data:</label>
                            </strong>
            <div id="customfield_10700-val" class="value type-textarea twixified" data-fieldtype="textarea" data-fieldtypecompletekey="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                                                  <div id="field-customfield_10700" class="twixi-block expanded">
            <div class="twixi-wrap verbose">
                <a href="#" class="twixi"><span class="icon-default aui-icon aui-icon-small aui-iconfont-expanded"><span>Hide</span></span></a>
                <div class="flooded">
                    Model series: G50, G58, G60, G61, G65, G70, G72, G78, NA0, NA1, NA5, NA6, NA7, NA8, NB0, NB5, NB6, ZA0, ZA5, ZA7<br/>
Defect Finder Team: [AT]CoC_EI_IuK<br/>
Lead Model Engine Type: BEV<br/>
Owner: Michael Pichlmeier<br/>
Phase: 04-In Progress<br/>
Involved I-Step: Undefined<br/>
Substatus: Integration<br/>
Initially found at: supplier<br/>
Reporting Relevance: Not Reporting Relevant<br/>
Target I-Step: NA05-25-07-490<br/>
Defect classification: Showstopper_Candidate<br/>
First use/SoP of function: 25-07<br/>
Tags: AQ_relevant, IuK_Cluster_25, Matrix-4A, TCD_AQ_checked, TCD_AQ_critical<br/>
Defect Finder: QQTEE05<br/>
Target Week: CW15<br/>
AIDA Business Key: FE-2144523925<br/>
<br/>
#### MAIN-SYNC ####<br/>
Status of last main-sync: SUCCESSFUL<br/>
###################<br/>
<br/>
### ATTACHMENTS ###<br/>
All Attachments have been synced successfully<br/>
###################<br/>
<br/>
#### COMMENTS #####<br/>
All Comments have been synced successfully<br/>
###################<br/>

                </div>
            </div>
            <div class="twixi-wrap concise">
                <a href="#" class="twixi"><span class="icon-default aui-icon aui-icon-small aui-iconfont-collapsed"><span>Show</span></span></a>
                <div class="flooded">
                                            Model series: G50, G58, G60, G61, G65, G70, G72, G78, NA0, NA1, NA5, NA6, NA7, NA8, NB0, NB5, NB6, ZA0, ZA5, ZA7 
Defect Finder Team: [AT]CoC_EI_IuK 
Lead Model Engine Type: BEV 
Owner: Michael Pichlmeier 
Phase: 04-In Progress 
Involved I-Step: Undefined 
Substatus: Integration 
Initially found at: supplier 
Reporting Relevance: Not Reporting Relevant 
Target I-Step: NA05-25-07-490 
Defect classification: Showstopper_Candidate 
First use/SoP of function: 25-07 
Tags: AQ_relevant, IuK_Cluster_25, Matrix-4A, TCD_AQ_checked, TCD_AQ_critical 
Defect Finder: QQTEE05 
Target Week: CW15 
AIDA Business Key: FE-2144523925 
 
#### MAIN-SYNC #### 
Status of last main-sync: SUCCESSFUL 
################### 
 
### ATTACHMENTS ### 
All Attachments have been synced successfully 
################### 
 
#### COMMENTS ##### 
All Comments have been synced successfully 
################### 

                                    </div>
            </div>
        </div>
      
                            </div>
        </div>
    </li>
                                                                                                                            </ul>
        </div>

=======================================================================================================

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import re  # Import regex for extracting text

# Set up WebDriver
chrome_options = Options()
service = Service("/home/ashishm22/Desktop/Jira_issues/chromedriver/chromedriver-linux64/chromedriver")
driver = webdriver.Chrome(service=service, options=chrome_options)

# Open Jira webpage
driver.get("https://jira.cc.bmwgroup.net/secure/StructureBoard.jspa?s=8870#")  
time.sleep(5)  # Allow page to load

try:
    wait = WebDriverWait(driver, 10)

    # ✅ Click "Other" tab by finding the tab using id-based XPath
    other_tab = wait.until(EC.element_to_be_clickable((By.XPATH, "//div[@id='customfield-panel-5']")))
    driver.execute_script("arguments[0].scrollIntoView();", other_tab)  # Scroll into view
    time.sleep(2)  # Allow the tab to load properly

    # ✅ Locate the Meta Data section
    metadata_div = wait.until(EC.presence_of_element_located((By.ID, "customfield_10700-val")))
    metadata_text = metadata_div.text  # Extract full text

    # ✅ Use regex to extract "Target I-Step" and "Target Week"
    target_istep_match = re.search(r"Target I-Step:\s*([\w-]+)", metadata_text)
    target_week_match = re.search(r"Target Week:\s*(CW\d+)", metadata_text)

    target_istep = target_istep_match.group(1) if target_istep_match else "Not found"
    target_week = target_week_match.group(1) if target_week_match else "Not found"

    print(f"✅ Target I-Step: {target_istep}")
    print(f"✅ Target Week: {target_week}")

except Exception as e:
    print("❌ Error:", e)

# Close browser
driver.quit()


