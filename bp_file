contactbook-lib


aidl_interface {
    name: "BMWContactBookLib",
    srcs: [
        "src/**/*.aidl",
    ],
    local_include_dir: "src",
    backend: {
        java: {
            sdk_version: "current",
            enabled: true,
        },
        cpp: {
            enabled: false,
        },
        ndk: {
            enabled: false,
        },
    },
    // this AIDL is only used by manager and service, which are located in
    // the same repo, so it is already stable and does not need additional
    // version checks

    unstable: true,
}

Explaination-

This code snippet defines an **`aidl_interface`** block, which is a construct commonly used in Android development to define interfaces for Android Interface Definition Language (AIDL) files. AIDL is a way to define the programming interface that both the client and service agree upon to communicate with each other in Android.

### Key Components of the Block

1. **`name`**:  
   Specifies the name of the AIDL interface, in this case, `"BMWContactBookLib"`. This is the identifier used for this AIDL interface.

2. **`srcs`**:  
   Specifies the location of the AIDL source files.  
   - `"src/**/*.aidl"`: This uses a wildcard pattern to include all AIDL files in the `src` directory and its subdirectories.

3. **`local_include_dir`**:  
   - Indicates the directory to be used for including local AIDL files. In this case, it points to the `src` directory.

4. **`backend`**:  
   This defines the backends to generate the interface code for different programming languages.  
   - **`java`**:  
     - `sdk_version: "current"`: Specifies that the generated Java code will use the current SDK version.  
     - `enabled: true`: Enables code generation for Java.  
   - **`cpp`** and **`ndk`**:  
     - `enabled: false`: Disables code generation for C++ and the Android NDK (Native Development Kit).

5. **`unstable`**:  
   - Indicates whether the AIDL interface is considered "unstable". When set to `true`, it means:
     - The interface is still subject to changes.
     - Versioning checks may not apply because the manager and service using this interface are in the same repository. The interface is already stable for internal use, even though it's marked as "unstable" in a broader context.

### Purpose of This Block

This configuration is for a library (`BMWContactBookLib`) that defines AIDL interfaces for interprocess communication (IPC) in an Android application. 

- The library is tailored for internal use between the **manager** and **service**, which reside in the same repository.
- Java backend code generation is enabled for these interfaces, while C++ and NDK backends are not needed and therefore disabled.
- The "unstable" flag signifies that the interface is used internally and doesn't require external versioning or compatibility guarantees.


================================================================================================================================
contactbook-manager



java_sdk_library {
    name: "BMWContactBookManager",
    srcs: [
        "src/**/*.java",
    ],
    static_libs: [
        "BMWContactBookLib-java",
    ],
    libs: [
        "androidx.annotation_annotation",
    ],
    api_packages: [
        "com.bmwgroup.apinext.contactbook.manager",
    ],
    platform_apis: true,
    system_ext_specific: true,
}

droidstubs {
    name: "BMWContactBookManager.docs",
    srcs: ["src/**/*.java"],
    annotations_enabled: true,
    create_doc_stubs: true,
}

// Static library for testing
java_library {
    name: "BMWContactBookManagerLib",
    installable: true,
    srcs: [
            "src/**/*.java",
        ],
    static_libs: [
            "BMWContactBookManagerLib-java",
            "vendor.bmw.contactbook-V1-java",
            "androidx.annotation_annotation",
        ],
    optimize: {
        enabled: false,
    },
    platform_apis: true,
}

filegroup {
    name: "BMWContactBookManager.api.public.latest",
    srcs: [
        "api/current.txt",
    ],
}

filegroup {
    name: "BMWContactBookManager-removed.api.public.latest",
    srcs: [
        "api/removed.txt",
    ],
}

filegroup {
    name: "BMWContactBookManager-incompatibilities.api.public.latest",
    srcs: [
        "api/incompatibilities.txt",
    ],
}

filegroup {
    name: "BMWContactBookManager.api.system.latest",
    srcs: [
        "api/system-current.txt",
    ],
}

filegroup {
    name: "BMWContactBookManager-removed.api.system.latest",
    srcs: [
        "api/system-removed.txt",
    ],
}

filegroup {
    name: "BMWContactBookManager-incompatibilities.api.system.latest",
    srcs: [
        "api/system-incompatibilities.txt",
    ],
}

Explaination- 

This snippet contains configuration blocks for building a Java-based library and related components in Android's build system (likely using **Soong** or **Blueprint**). Here's a detailed explanation of the key blocks:

---

### **1. `java_sdk_library` Block**

This defines the **`BMWContactBookManager`** as a Java SDK library, which is a special library type in the Android platform that supports SDK and API surface management.

#### Key Properties:
- **`name`**:  
  The name of the library, `"BMWContactBookManager"`.
  
- **`srcs`**:  
  Specifies the source files for the library, using a wildcard pattern to include all `.java` files in the `src` directory and its subdirectories.

- **`static_libs`**:  
  Declares dependencies on static libraries. In this case:
  - `"BMWContactBookLib-java"`: Likely the Java interface library defined earlier.

- **`libs`**:  
  Declares dependencies on other libraries. Here:
  - `"androidx.annotation_annotation"`: Provides annotation support from the AndroidX library.

- **`api_packages`**:  
  Specifies the API package(s) that this library exposes. Here:
  - `"com.bmwgroup.apinext.contactbook.manager"`: This is the namespace for the APIs.

- **`platform_apis`**:  
  When set to `true`, this allows the library to use platform-specific APIs (APIs not available to apps outside the platform).

- **`system_ext_specific`**:  
  Indicates that this library is part of the **system_ext** partition, a partition for vendor-customizable system extensions.

---

### **2. `droidstubs` Block**

This block is used to generate API stubs and documentation for the `BMWContactBookManager` library.

#### Key Properties:
- **`name`**:  
  The name of this target is `"BMWContactBookManager.docs"`.

- **`srcs`**:  
  Specifies the source files (Java files) for which documentation and stubs will be generated.

- **`annotations_enabled`**:  
  When `true`, enables processing of Java annotations for the documentation and stubs.

- **`create_doc_stubs`**:  
  When `true`, generates stubs for the API documentation.

---

### **3. `java_library` Block**

This defines a static Java library (`BMWContactBookManagerLib`) primarily for testing purposes.

#### Key Properties:
- **`name`**:  
  The name of this library, `"BMWContactBookManagerLib"`.

- **`installable`**:  
  When `true`, this library can be installed as a standalone component.

- **`srcs`**:  
  Specifies the source files for the library.

- **`static_libs`**:  
  Declares dependencies on static libraries. This includes:
  - `"BMWContactBookManagerLib-java"`
  - `"vendor.bmw.contactbook-V1-java"`: Likely a vendor-specific Java library.
  - `"androidx.annotation_annotation"`: Annotations library.

- **`optimize`**:  
  - **`enabled: false`**: Disables optimization during the build, useful for debugging or testing.

- **`platform_apis`**:  
  Allows the library to use platform-specific APIs.

---

### **4. `filegroup` Blocks**

These blocks group related files for specific API purposes. Each group has a name and a list of source files (`srcs`) related to API definitions, removals, or incompatibilities.

#### Key Properties:
- **`name`**:  
  Describes the purpose of the file group. Examples:
  - `"BMWContactBookManager.api.public.latest"`: Contains the current public API definitions.
  - `"BMWContactBookManager-removed.api.public.latest"`: Tracks APIs that have been removed from the public interface.
  - `"BMWContactBookManager-incompatibilities.api.public.latest"`: Lists APIs with public-facing incompatibilities.

- **`srcs`**:  
  Points to the specific files holding the API details:
  - `current.txt`: Defines the current API.
  - `removed.txt`: Tracks removed APIs.
  - `incompatibilities.txt`: Logs incompatibilities.
  - `system-current.txt`, `system-removed.txt`, etc.: Similar files for **system APIs**.

---

### **Summary of Purpose**

This configuration defines a Java SDK library (`BMWContactBookManager`) and related testing and documentation components for an Android platform project. The blocks ensure the following:
1. **`java_sdk_library`**: Defines the library's main API and its inclusion in the platform.
2. **`droidstubs`**: Supports documentation and API stubs generation.
3. **`java_library`**: Provides a static library version for testing.
4. **`filegroup`**: Tracks the library's API changes, removals, and incompatibilities.

This setup is typical for managing a modularized and well-documented Java library in Android platform development.


=====================================================================================================================================

contactbook-service

// Copy priveleged permissions to /system/etc/permissions
prebuilt_etc {
    name: "bmw-privapp-permissions-contactbook.xml",
    src: "permissions/bmw-privapp-permissions-contactbook.xml",
    sub_dir: "permissions",
    system_ext_specific: true,
}

android_app {
    name: "BMWContactBookService",
    manifest: "AndroidManifest.xml",
    static_libs: [
        "BMWContactBookServiceLib",
        "BMWContactBookLib-java",

    ],
    certificate: "platform",
    system_ext_specific: true,
    privileged: true,
    platform_apis: true,
    required: ["bmw-privapp-permissions-contactbook.xml"],
}

// Static library for testing
java_library {
name: "BMWContactBookServiceLib",
installable: true,

    srcs: [
        "src/**/*.java",
    ],
    static_libs: [
        "BMWContactBookLib-java",
        "vendor.bmw.contactbook-V1-java",
        "vendor.bmw.commonapi-V1-java",
        "androidx.annotation_annotation",
    ],

    optimize: {
        enabled: false,
    },
}

Explaination-

This snippet describes configurations for building a privileged Android app, its dependencies, and associated permissions files in the Android build system (likely using **Soong**). Here's a breakdown of the components:

---

### **1. `prebuilt_etc` Block**

This block defines a **prebuilt permissions file** that will be included in the **system_ext** partition. Prebuilt files are non-source assets that are directly included in the build.

#### Key Properties:
- **`name`**:  
  The name of the prebuilt file, `"bmw-privapp-permissions-contactbook.xml"`. This is how other build targets (like `required`) refer to it.

- **`src`**:  
  The source file path for the permissions file, `"permissions/bmw-privapp-permissions-contactbook.xml"`.

- **`sub_dir`**:  
  Specifies the subdirectory under which the file will be placed in the final build. In this case, it will be under the `permissions` directory.

- **`system_ext_specific`**:  
  Indicates that this file is specifically for the **system_ext** partition, typically used for vendor-customizable extensions to the Android platform.

---

### **2. `android_app` Block**

This defines an **Android application** (`BMWContactBookService`) that will be built and included in the platform as a privileged app.

#### Key Properties:
- **`name`**:  
  The name of the application, `"BMWContactBookService"`.

- **`manifest`**:  
  The location of the app's AndroidManifest file, `"AndroidManifest.xml"`.

- **`static_libs`**:  
  Dependencies on static libraries:
  - `"BMWContactBookServiceLib"`: A static library containing app-specific code.
  - `"BMWContactBookLib-java"`: A shared library for contact book-related functionality.

- **`certificate`**:  
  Specifies the signing certificate for the app, `"platform"`. This allows the app to be signed with the platform's key, granting it special privileges.

- **`system_ext_specific`**:  
  Indicates that the app will reside in the **system_ext** partition.

- **`privileged`**:  
  When `true`, this marks the app as a **privileged app**, granting it additional permissions (like accessing private APIs) that regular apps cannot use.

- **`platform_apis`**:  
  When `true`, this allows the app to use platform-specific (non-SDK) APIs.

- **`required`**:  
  Lists additional build artifacts required for the app. In this case:
  - `"bmw-privapp-permissions-contactbook.xml"`: Ensures that the permissions file is present for this app during deployment.

---

### **3. `java_library` Block**

This defines a **static library** (`BMWContactBookServiceLib`) used by the app (`BMWContactBookService`) and possibly for testing purposes.

#### Key Properties:
- **`name`**:  
  The name of the library, `"BMWContactBookServiceLib"`.

- **`installable`**:  
  When `true`, the library can be installed as a standalone component (useful for debugging or testing).

- **`srcs`**:  
  Includes all Java source files in the `src` directory and subdirectories.

- **`static_libs`**:  
  Declares dependencies on other static libraries:
  - `"BMWContactBookLib-java"`: Shared contact book library.
  - `"vendor.bmw.contactbook-V1-java"`: Vendor-specific library for version 1 of the contact book API.
  - `"vendor.bmw.commonapi-V1-java"`: Another vendor-specific library for general API functionalities.
  - `"androidx.annotation_annotation"`: Provides annotation support.

- **`optimize`**:  
  - **`enabled: false`**: Disables optimization, useful for debugging or testing purposes.

---

### **Purpose of Each Block**

1. **`prebuilt_etc`**:  
   Ensures the necessary permissions file (`bmw-privapp-permissions-contactbook.xml`) is included in the build for granting privileged permissions to the app.

2. **`android_app`**:  
   Defines the main app, `BMWContactBookService`, which:
   - Uses privileged APIs.
   - Resides in the `system_ext` partition.
   - Requires the permissions defined in the prebuilt file.

3. **`java_library`**:  
   Provides a static library (`BMWContactBookServiceLib`) with reusable code and dependencies that the app (`BMWContactBookService`) relies on.

---

### **Summary of the Configuration**

This setup is designed to build a privileged system application (`BMWContactBookService`) for managing a contact book. The app has special permissions and platform API access. It depends on:
1. Static libraries for its functionality.
2. A prebuilt XML file for permissions, ensuring it can operate as a privileged app in the **system_ext** partition. 

This is typical for apps tightly integrated with the Android platform and customized for a vendor-specific implementation.

==========================================================================================================================

telephony-manager



java_sdk_library {
    name: "BMWTelephonyManager",
    srcs: [
        "src/**/*.java",
    ],
    static_libs: [
        "vendor.bmw.telephonyprovider.telephonymanager-V1-java",
    ],
    libs: [
        "androidx.annotation_annotation",
    ],
    api_packages: [
        "com.bmwgroup.apinext.telephony.manager",
        "com.bmwgroup.apinext.telephony.manager.callbacks",
        "com.bmwgroup.apinext.telephony.manager.actions",
        "com.bmwgroup.apinext.telephony.manager.data",
        "com.bmwgroup.apinext.telephony.manager.types",
    ],
    sdk_version: "module_current",
    product_specific: true,
}

droidstubs {
    name: "BMWTelephonyManager.docs",
    srcs: [
        "src/com/bmwgroup/apinext/telephony/manager/actions/*.java",
        "src/com/bmwgroup/apinext/telephony/manager/callbacks/*.java",
        "src/com/bmwgroup/apinext/telephony/manager/data/*.java",
        "src/com/bmwgroup/apinext/telephony/manager/types/*.java",
        "src/com/bmwgroup/apinext/telephony/manager/BMWTelephonyManager.java",
        "src/com/bmwgroup/apinext/telephony/manager/BMWTelephonyManagerVersion.java",
        "src/com/bmwgroup/apinext/telephony/manager/ConnectionFailedException.java",
        "src/com/bmwgroup/apinext/telephony/manager/ServiceNotReadyException.java"
    ],
    annotations_enabled: true,
    create_doc_stubs: true,
}

// Static library for testing
java_library {
    name: "BMWTelephonyManagerLib",
    installable: true,
    srcs: [
            "src/**/*.java",
        ],
    static_libs: [
            "vendor.bmw.telephonyprovider.telephonymanager-V1-java",
            "androidx.annotation_annotation",
        ],
    optimize: {
        enabled: false,
    },
    platform_apis: true,
}

filegroup {
    name: "BMWTelephonyManager.api.public.latest",
    srcs: [
        "api/current.txt",
    ],
}

filegroup {
    name: "BMWTelephonyManager-removed.api.public.latest",
    srcs: [
        "api/removed.txt",
    ],
}

filegroup {
    name: "BMWTelephonyManager-incompatibilities.api.public.latest",
    srcs: [
        "api/incompatibilities.txt",
    ],
}

filegroup {
    name: "BMWTelephonyManager.api.system.latest",
    srcs: [
        "api/system-current.txt",
    ],
}

filegroup {
    name: "BMWTelephonyManager-removed.api.system.latest",
    srcs: [
        "api/system-removed.txt",
    ],
}

filegroup {
    name: "BMWTelephonyManager-incompatibilities.api.system.latest",
    srcs: [
        "api/system-incompatibilities.txt",
    ],
}

filegroup {
    name: "BMWTelephonyManagerDocSources",
    srcs: [
        "src/com/bmwgroup/apinext/telephony/manager/actions/*.java",
        "src/com/bmwgroup/apinext/telephony/manager/callbacks/*.java",
        "src/com/bmwgroup/apinext/telephony/manager/data/*.java",
        "src/com/bmwgroup/apinext/telephony/manager/types/*.java",
        "src/com/bmwgroup/apinext/telephony/manager/BMWTelephonyManager.java",
        "src/com/bmwgroup/apinext/telephony/manager/ConnectionFailedException.java",
        "src/com/bmwgroup/apinext/telephony/manager/ServiceNotReadyException.java",
        "doc/**/*",
    ],
}

Explaination-

This snippet defines configurations for building and managing a Java SDK library for telephony-related functionality in an Android platform environment. The setup includes the library, documentation generation, static library for testing, and API tracking.

---

### **1. `java_sdk_library` Block**

This defines the `BMWTelephonyManager` as a **Java SDK library**, enabling controlled access to its APIs and dependencies.

#### Key Properties:
- **`name`**:  
  The library's name, `"BMWTelephonyManager"`.

- **`srcs`**:  
  Includes all Java source files under the `src` directory and its subdirectories.

- **`static_libs`**:  
  Specifies dependencies on static libraries:
  - `"vendor.bmw.telephonyprovider.telephonymanager-V1-java"`: Likely a vendor-specific library providing telephony-related backend functionality.

- **`libs`**:  
  Declares additional dependencies:
  - `"androidx.annotation_annotation"`: Provides annotations from the AndroidX library.

- **`api_packages`**:  
  Lists the Java packages exposed by this library as APIs:
  - Includes a hierarchy of packages for actions, callbacks, data structures, and types related to the telephony manager.

- **`sdk_version`**:  
  Specifies that the library uses the current module-specific SDK version (`module_current`), ensuring compatibility with the current Android module version.

- **`product_specific`**:  
  Indicates the library is tied to a specific product configuration (e.g., only available on devices with BMW-specific customizations).

---

### **2. `droidstubs` Block**

The `droidstubs` block generates API stubs and documentation for the `BMWTelephonyManager`.

#### Key Properties:
- **`name`**:  
  The target name, `"BMWTelephonyManager.docs"`.

- **`srcs`**:  
  Specifies the source files for documentation generation. This includes:
  - Java files defining actions, callbacks, data types, and exceptions.
  - The main `BMWTelephonyManager` class and its version file.

- **`annotations_enabled`**:  
  When `true`, includes annotations (e.g., `@NonNull`, `@Nullable`) in the generated documentation and stubs.

- **`create_doc_stubs`**:  
  When `true`, generates stub files for the APIs alongside documentation.

---

### **3. `java_library` Block**

This defines a static library (`BMWTelephonyManagerLib`) for internal or testing purposes.

#### Key Properties:
- **`name`**:  
  The library's name, `"BMWTelephonyManagerLib"`.

- **`installable`**:  
  When `true`, allows the library to be installed independently, useful for debugging or testing.

- **`srcs`**:  
  Includes all Java source files under the `src` directory and subdirectories.

- **`static_libs`**:  
  Specifies dependencies:
  - `"vendor.bmw.telephonyprovider.telephonymanager-V1-java"`: Backend telephony functionality.
  - `"androidx.annotation_annotation"`: Annotation library.

- **`optimize`**:  
  - **`enabled: false`**: Disables optimization, useful for testing or debugging.

- **`platform_apis`**:  
  Allows the library to use platform-specific (non-SDK) APIs.

---

### **4. `filegroup` Blocks**

These blocks organize files related to the library's API tracking and documentation.

#### API Tracking:
- **`BMWTelephonyManager.api.public.latest`**: Contains the current public API definitions.
- **`BMWTelephonyManager-removed.api.public.latest`**: Tracks removed public APIs.
- **`BMWTelephonyManager-incompatibilities.api.public.latest`**: Logs incompatibilities in the public API.

#### System API Tracking:
- **`BMWTelephonyManager.api.system.latest`**: Contains the current system-level API definitions.
- **`BMWTelephonyManager-removed.api.system.latest`**: Tracks removed system-level APIs.
- **`BMWTelephonyManager-incompatibilities.api.system.latest`**: Logs incompatibilities in the system-level API.

#### Documentation Sources:
- **`BMWTelephonyManagerDocSources`**: Groups files used for generating documentation. Includes:
  - Java files defining actions, callbacks, data types, exceptions, and the telephony manager itself.
  - A `doc` directory for additional documentation resources (e.g., images, markdown files).

---

### **Purpose of Each Block**

1. **`java_sdk_library`**:  
   - Defines the core telephony manager library and its public API for the Android platform.
   - Includes product-specific configurations to limit the library's availability to relevant devices.

2. **`droidstubs`**:  
   - Generates API stubs and documentation for developers who use this library.

3. **`java_library`**:  
   - Provides a static library for internal testing and debugging purposes.

4. **`filegroup`**:  
   - Organizes files for API tracking and documentation purposes, supporting controlled API evolution.

---

### **Summary**

This configuration manages the `BMWTelephonyManager` library as part of an Android platform project. It includes:
- The main library with public APIs.
- Tools for generating API documentation and stubs.
- A static library for internal testing.
- File groups for tracking API changes and managing documentation.

This setup is crucial for maintaining a well-documented, backward-compatible, and stable library for telephony-related functionality, particularly in a product-specific context like BMW's Android integration.
