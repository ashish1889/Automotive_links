https://kotlinlang.org/docs/getting-started.html
https://play.kotlinlang.org/
https://www.youtube.com/watch?v=NosAkIKgA4Y&list=PLRKyZvuMYSIMW3-rSOGCkPlO1z_IYJy3G&ab_channel=CheezyCode

Kotlin - statically typed language - at compile time checking done
OOPS and functional language
var -> used to declare mutable variable
val -> used to declare constant variable

To explicitly define data type-> var score : Int = 12
To convert any integer to float=> i.toFloat()

Shortcircuiting:

fun main(){
 var i = 10
 var j = 11
 var result = i == 10 || j++ == 11
 println(i) //10
 println(j) //11 - here shortcircuiting happened as part of code after OR operator didn't execute
}

Similar shortcircuiting can be done in case of AND operator


If else statement as expression-

fun main(){
 val number = 21
 val result = if(number % 2 == 0){
                  "Even"
              } else{
                   "Odd"
              }
print(result) //Odd
}

This can be rewritten as- 
fun main(){
val number = 21
val result = if(number % 2 == 0) "Even" else "Odd"
print(result) //Odd
}

Kotlin doesnot have ternary operator as like other languages

Range->
fun main(){
val number = 5
val result = number in 1..5 //1,2,3,4,5
val result1 = number in 1 until 5 // here upper bound 5 will not be included
println(result)//true
println(result1)//false
}

Use of when in kotlin-> when is similar to switch case in other programming languages

fun main(){
val animal = "Dog"
when(animal){
"Horse" -> println("Animal is horse")
"Cat" -> println("Animal is cat")
"Dog" -> println("Animal is Dog")
else -> println("Animal not found")
}
}
O/p: Animal is Dog

Use of range in when->

fun main(){
val number = 15
val result = when(number){
11 -> "Eleven"
12 -> "Twelve"
in 13..19 -> "Teen"
else -> "Not in range"
}
println(result)
}
O/p: Teen

For loop =>
fun main(){
for(i in 1..5)
{
println(i)
}
}

O/p=>
1
2
3
4
5

Here increments takes place by 1 only

For increment to take place by more than 1 => use step

fun main(){
for(i in 1..5 step 2)
{
println(i)
}
}

O/p=>
1
3
5




Use of Until=>

fun main(){
for(i in 1 until 5)
{
println(i)
}
}
O/p=>
1
2
3
4

For decrement in for loop => use of downTo

fun main(){
for(i in 10 downTo 1 step 2)
{
println(i)
}
}

O/p=>
10
8
6
4
2

String templating in Kotlin =>

fun main(){
val number = 2
for(i in 1..10)
{
//String templating
println("$number X $i = ${number * i}")
}
}

O/p=>
2 X 1 = 2
2 X 2 = 4
2 X 3 = 6
2 X 4 = 8
2 X 5 = 10
2 X 6 = 12
2 X 7 = 14
2 X 8 = 16
2 X 9 = 18
2 X 10 = 20







